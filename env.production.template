# Production Environment Configuration Template
# This file shows how to configure production environment variables
# DO NOT commit actual secrets to version control!

# =============================================================================
# SECRETS MANAGEMENT
# =============================================================================
# For production, use a secrets manager instead of hardcoded values:
# - AWS Secrets Manager
# - HashiCorp Vault
# - Azure Key Vault
# - Google Secret Manager
# - Kubernetes Secrets

# Example: AWS Secrets Manager
# JWT_SECRET=$(aws secretsmanager get-secret-value --secret-id "user-doc-chat/jwt-secret" --query SecretString --output text)

# Example: HashiCorp Vault
# JWT_SECRET=$(vault kv get -field=jwt_secret secret/user-doc-chat)

# Example: Environment variable (NOT recommended for production)
# JWT_SECRET=your_cryptographically_secure_jwt_secret_here

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
NODE_ENV=production
PORT=3000
LOG_LEVEL=info

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# SECURE: Database credentials loaded from secure secret store
# For Docker: Use Docker secrets or environment variables
# For Kubernetes: Use Kubernetes secrets
# For Cloud: Use cloud secrets manager (AWS Secrets Manager, Azure Key Vault, etc.)
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:${DB_PORT}/${POSTGRES_DB}?sslmode=require&pool_size=20
DB_HOST=${DB_HOST}
DB_PORT=5432
POSTGRES_DB=${POSTGRES_DB}
POSTGRES_USER=${POSTGRES_USER}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
# SECURE: Redis credentials loaded from secure secret store
REDIS_URL=rediss://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}
REDIS_HOST=${REDIS_HOST}
REDIS_PORT=6380
REDIS_PASSWORD=${REDIS_PASSWORD}

# =============================================================================
# JWT CONFIGURATION
# =============================================================================
# CRITICAL: Use a secrets manager for production!
# Generate with: openssl rand -base64 32
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRES_IN=3600
JWT_AUDIENCE=${JWT_AUDIENCE}
JWT_ISSUER=${JWT_ISSUER}
JWT_MAX_AGE=86400

# =============================================================================
# EXTERNAL API KEYS
# =============================================================================
# SECURE: API keys loaded from secure secret store
OPENAI_API_KEY=${OPENAI_API_KEY}
ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
SERP_API_KEY=${SERP_API_KEY}
BING_SEARCH_API_KEY=${BING_SEARCH_API_KEY}
BING_SEARCH_ENDPOINT=https://api.bing.microsoft.com/v7.0/search

# =============================================================================
# VECTOR DATABASE CONFIGURATION
# =============================================================================
# SECURE: API keys loaded from secure secret store
PINECONE_API_KEY=${PINECONE_API_KEY}
PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================
# SECURE: MinIO/S3 credentials loaded from secure secret store
MINIO_ENDPOINT=${MINIO_ENDPOINT}
MINIO_PORT=443
MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
MINIO_USE_SSL=true
S3_BUCKET=${S3_BUCKET}

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Use HTTPS origins in production
CORS_ORIGIN=${CORS_ORIGIN}
CORS_ORIGINS=${CORS_ORIGINS}
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
MAX_REQUEST_SIZE=10485760

# =============================================================================
# MONITORING AND OBSERVABILITY
# =============================================================================
PROMETHEUS_PORT=9090
GRAFANA_PORT=3001

# =============================================================================
# EMAIL CONFIGURATION
# =============================================================================
# SECURE: Email credentials loaded from secure secret store
SMTP_HOST=${SMTP_HOST}
SMTP_PORT=587
SMTP_USER=${SMTP_USER}
SMTP_PASS=${SMTP_PASS}

# =============================================================================
# SECRETS MANAGEMENT INSTRUCTIONS
# =============================================================================
# 
# This template uses environment variables for all sensitive data.
# For production deployment, populate these variables from your secret store:
#
# 1. Docker Secrets (Recommended for Docker Swarm):
#    echo "your-db-password" | docker secret create postgres_password -
#    echo "your-jwt-secret" | docker secret create jwt_secret -
#    echo "your-redis-password" | docker secret create redis_password -
#    echo "your-minio-access-key" | docker secret create minio_access_key -
#    echo "your-minio-secret-key" | docker secret create minio_secret_key -
#    
# 2. Kubernetes Secrets:
#    kubectl create secret generic app-secrets \
#      --from-literal=postgres-password="your-db-password" \
#      --from-literal=jwt-secret="your-jwt-secret" \
#      --from-literal=redis-password="your-redis-password" \
#      --from-literal=minio-access-key="your-minio-access-key" \
#      --from-literal=minio-secret-key="your-minio-secret-key"
#
# 3. Cloud Secrets Manager:
#    - AWS: aws secretsmanager get-secret-value --secret-id "user-doc-chat/db-password"
#    - Azure: az keyvault secret show --vault-name "your-vault" --name "db-password"
#    - GCP: gcloud secrets versions access latest --secret="db-password"
#
# 4. HashiCorp Vault:
#    vault kv get -field=password secret/user-doc-chat/database
#
# 5. Environment Variables (NOT recommended for production):
#    export POSTGRES_PASSWORD="your-secure-password"
#    export JWT_SECRET="your-secure-jwt-secret"
#
# CRITICAL SECURITY NOTES:
# - Never commit actual secrets to version control
# - Rotate secrets regularly (recommended: every 90 days)
# - Use least privilege access controls
# - Enable audit logging for all secret access
# - Use different secrets for each environment (dev/staging/prod)
# - Store secrets in encrypted form at rest and in transit
# - Use the provided scripts for secret generation and rotation
#
# SECRET ROTATION PROCEDURE:
# 1. Generate new secrets: ./scripts/generate-secrets.sh
# 2. Update secret store with new values
# 3. Restart application services
# 4. Verify application functionality
# 5. Remove old secrets from secret store
#
# ACCESS PERMISSIONS:
# - Only deployment pipelines should have write access to secrets
# - Application services should have read-only access
# - Developers should not have direct access to production secrets
# - Use service accounts with minimal required permissions
