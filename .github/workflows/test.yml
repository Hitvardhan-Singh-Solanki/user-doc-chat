name: Test Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:6
        ports:
          - 6379:6379
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: python-deps-${{ hashFiles('python_service/requirements.txt') }}
          restore-keys: |
            python-deps-

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r python_service/requirements.txt

      - name: Start gRPC sanitizer (background)
        run: |
          python python_service/main_grpc_server.py &
          set -euo pipefail
          for i in {1..60}; do
            if (echo > /dev/tcp/127.0.0.1/50051) >/dev/null 2>&1; then
              echo "Sanitizer is up"
              break
            fi
            sleep 1
          done
          if ! (echo > /dev/tcp/127.0.0.1/50051) >/dev/null 2>&1; then
            echo "Sanitizer did not start within 60s" >&2
            exit 1
          fi

      - name: Run tests
        env:
          NODE_ENV: test
          POSTGRES_URL: postgres://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-jwt-key-for-development-only
          SANITIZER_HOST: 127.0.0.1:50051
          # Toy tokens for testing (replace with real secrets in production)
          HUGGINGFACE_HUB_TOKEN: some-fake-token-for-testing-only
          PINECONE_API_KEY: some-fake-key-for-testing-only
          HUGGINGFACE_CHAT_MODEL: some-fake-model-for-testing-only
          HUGGINGFACE_SUMMARY_MODEL: some-fake-model-for-testing-only
          HUGGINGFACE_EMBEDDING_MODEL: some-fake-model-for-testing-only
          PINECONE_INDEX_NAME: test-index
          DATABASE_URL: some-test-url
        run: npm test

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/
