# Production Docker Compose Configuration with Docker Secrets
# This file demonstrates secure secrets management using Docker secrets
# DO NOT commit actual secrets to version control!

version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    ports:
      - "3000:3000"
    environment:
      # Application configuration
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      
      # Database configuration - SECURE: Load from secret store
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=require
      - DB_HOST=postgres
      - DB_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # JWT configuration - CRITICAL: Use secrets manager!
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=3600
      
      # External API keys - Store in secrets manager
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SERP_API_KEY=${SERP_API_KEY}
      - BING_SEARCH_API_KEY=${BING_SEARCH_API_KEY}
      - BING_SEARCH_ENDPOINT=https://api.bing.microsoft.com/v7.0/search
      
      # Vector database configuration
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      
      # Storage configuration - Using Docker secrets
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY_FILE=/run/secrets/minio_access_key
      - MINIO_SECRET_KEY_FILE=/run/secrets/minio_secret_key
      - MINIO_USE_SSL=false
      - S3_BUCKET=${S3_BUCKET}
      
      # Security configuration
      - CORS_ORIGIN=${CORS_ORIGIN}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      
      # Monitoring
      - PROMETHEUS_PORT=9090
      - GRAFANA_PORT=3001
    depends_on:
      - postgres
      - redis
      - minio
    restart: unless-stopped
    networks:
      - app-network
    secrets:
      - minio_access_key
      - minio_secret_key
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - app-network
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER_FILE=/run/secrets/minio_access_key
      - MINIO_ROOT_PASSWORD_FILE=/run/secrets/minio_secret_key
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: unless-stopped
    networks:
      - app-network
    secrets:
      - minio_access_key
      - minio_secret_key
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge

secrets:
  minio_access_key:
    file: ./secrets/minio-access-key.txt
  minio_secret_key:
    file: ./secrets/minio-secret-key.txt

# =============================================================================
# SECURE SECRETS MANAGEMENT INSTRUCTIONS
# =============================================================================
# 
# This Docker Compose file uses Docker secrets for MinIO credentials.
# For production deployment, follow these steps:
#
# 1. Generate secure MinIO credentials:
#    MINIO_ACCESS_KEY=$(openssl rand -base64 32)
#    MINIO_SECRET_KEY=$(openssl rand -base64 32)
#
# 2. Create secrets files (already done):
#    echo "$MINIO_ACCESS_KEY" > secrets/minio-access-key.txt
#    echo "$MINIO_SECRET_KEY" > secrets/minio-secret-key.txt
#
# 3. Create other required secrets:
#    JWT_SECRET=$(openssl rand -base64 32)
#    DB_PASSWORD=$(openssl rand -base64 32)
#    REDIS_PASSWORD=$(openssl rand -base64 32)
#
# 4. Create a .env.production file with non-secret values:
#    cp env.production.template .env.production
#    # Edit .env.production with actual non-secret values
#
# 5. Deploy with secrets:
#    docker-compose -f docker-compose.production-secure.yml --env-file .env.production up -d
#
# 6. Alternative: Use Docker swarm secrets (recommended for production):
#    # Initialize swarm
#    docker swarm init
#    
#    # Create secrets
#    echo "your-minio-access-key" | docker secret create minio_access_key -
#    echo "your-minio-secret-key" | docker secret create minio_secret_key -
#    echo "your-jwt-secret" | docker secret create jwt_secret -
#    echo "your-db-password" | docker secret create db_password -
#    
#    # Deploy stack
#    docker stack deploy -c docker-compose.production-secure.yml user-doc-chat
#
# 7. For Kubernetes deployment, use Kubernetes secrets:
#    kubectl create secret generic minio-secrets \
#      --from-literal=access-key="your-minio-access-key" \
#      --from-literal=secret-key="your-minio-secret-key"
#
# 8. For cloud deployment, use cloud secrets managers:
#    - AWS Secrets Manager
#    - Azure Key Vault
#    - Google Secret Manager
#    - HashiCorp Vault
#
# 9. CRITICAL: Rotate credentials immediately if defaults were used:
#    ./scripts/rotate-minio-credentials.sh
#
# NEVER commit actual secrets to version control!
# The secrets/ directory is already in .gitignore
